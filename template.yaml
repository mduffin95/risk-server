AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  risk-lambda-sam

  Sample SAM Template for risk-lambda-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    MemorySize: 512
    Environment:
      Variables:
        TABLE_NAME:
          Ref: GameStateTable
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
Resources:
  RiskFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: .
      Handler: net.mjduffin.risk.lambda.App::handleRequest
      Runtime: java21
      Architectures:
        - x86_64
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
      Events:
        Risk:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref RiskApiGateway
            Path: /api/{proxy+}
            Method: ANY
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref GameStateTable
    Metadata:
      BuildMethod: makefile

  RiskApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: risk-lambda-sam
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS, POST, GET'"
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"

  # The results table storing the normalised form data
  GameStateTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub "${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  RiskApi:
    Description: API Gateway endpoint URL for Prod stage for Risk function
    Value: !Sub "https://${RiskApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/api/"
  RiskFunction:
    Description: Risk Lambda Function ARN
    Value: !GetAtt RiskFunction.Arn
  RiskLambdaFunctionIamRole:
    Description: Implicit IAM Role created for Risk function
    Value: !GetAtt RiskFunctionRole.Arn
